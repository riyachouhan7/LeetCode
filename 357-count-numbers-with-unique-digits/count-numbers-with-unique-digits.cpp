class Solution {
public:
    int countNumbersWithUniqueDigits(int n) {
        if (n == 0) return 1;
        if (n == 1) return 10; // 0..9
        if (n == 2) return 10 + 9*9; // 10 + 81 = 91
        if (n == 3) return 10 + 9*9 + 9*9*8; // 10 + 81 + 648 = 739
        if (n == 4) return 10 + 9*9 + 9*9*8 + 9*9*8*7; // +4536 = 5275
        if (n == 5) return 10 + 9*9 + 9*9*8 + 9*9*8*7 + 9*9*8*7*6; // +27216 = 32491
        if (n == 6) return 10 + 9*9 + 9*9*8 + 9*9*8*7 + 9*9*8*7*6 + 9*9*8*7*6*5; // +136080 = 168571
        if (n == 7) return 10 + 9*9 + 9*9*8 + 9*9*8*7 + 9*9*8*7*6 + 9*9*8*7*6*5 + 9*9*8*7*6*5*4; // +544320 = 712891
        if (n == 8) return 10 + 9*9 + 9*9*8 + 9*9*8*7 + 9*9*8*7*6 + 9*9*8*7*6*5 + 9*9*8*7*6*5*4 + 9*9*8*7*6*5*4*3; // +1632960 = 2345851
        return 0; // For n > 8, the unique digit count stabilizes
    }
};
